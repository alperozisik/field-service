/* 
		WARNING 
		Auto generated file. 
		Do not modify its contents.
*/

const extend = require('js-base/core/extend');
const FlexLayout = require('sf-core/ui/flexlayout');
const Color = require('sf-core/ui/color');
const Button = require('sf-core/ui/button');
const TextAlignment = require('sf-core/ui/textalignment');
const Font = require('sf-core/ui/font');
const ImageView = require('sf-core/ui/imageview');
const Image = require('sf-core/ui/image');
const ImageFillType = require('sf-core/ui/imagefilltype');
const Label = require('sf-core/ui/label');



const getCombinedStyle = require("library/styler-builder").getCombinedStyle;

const SliderDrawer = extend(FlexLayout)(
	//constructor
	function(_super, props) {
		// initalizes super class for this component scope
		_super(this, props);

		const flUserInfoStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			paddingBottom: 10,
			height: 250,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var flUserInfo = new FlexLayout(flUserInfoStyle);
		this.addChild(flUserInfo);
		
		const flActionsStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginBottom: 38,
			marginTop: 2,
			height: null,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1
		});
		var flActions = new FlexLayout(flActionsStyle);
		this.addChild(flActions);
		
		const btnSigoutStyle = getCombinedStyle(".button", {
			backgroundColor: Color.create(0, 0, 161, 241),
			alpha: 0.5,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDCENTER,
			textColor: Color.create("#FFFFFF"),
			bottom: 22,
			height: 15,
			left: 26,
			text: "Sign Out",
			visible: true,
			width: 150,
			positionType: FlexLayout.PositionType.ABSOLUTE,
			font: Font.create("Lato", 12.5, Font.NORMAL)
		});
		var btnSigout = new Button(btnSigoutStyle);
		this.addChild(btnSigout);
		this.btnSigout = btnSigout;

		const lineStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create("#FFFFFF"),
			alpha: 0.7,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			right: 10,
			bottom: 0,
			height: 0.5,
			left: 10,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.ABSOLUTE
		});
		var line = new FlexLayout(lineStyle);
		flUserInfo.addChild(line);
		
		const flDashboardStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginLeft: 26,
			marginTop: 30,
			height: 22,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.ROW,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var flDashboard = new FlexLayout(flDashboardStyle);
		flActions.addChild(flDashboard);
		this.flDashboard = flDashboard;

		const placeholder1Style = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: null,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 2
		});
		var placeholder1 = new FlexLayout(placeholder1Style);
		flUserInfo.addChild(placeholder1);
		
		const flCustomersStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginLeft: 26,
			marginTop: 30,
			height: 22,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.ROW,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var flCustomers = new FlexLayout(flCustomersStyle);
		flActions.addChild(flCustomers);
		this.flCustomers = flCustomers;

		const flUserImageStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderRadius: 0,
			borderColor: Color.create(255, 255, 255, 255),
			borderWidth: 0,
			height: null,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.CENTER,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.CENTER,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 3
		});
		var flUserImage = new FlexLayout(flUserImageStyle);
		flUserInfo.addChild(flUserImage);
		
		const flNotificationsStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginLeft: 26,
			marginTop: 30,
			height: 22,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.ROW,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var flNotifications = new FlexLayout(flNotificationsStyle);
		flActions.addChild(flNotifications);
		
		const flGroupNotificationsStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginLeft: 52,
			marginTop: 30,
			height: 22,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.ROW,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var flGroupNotifications = new FlexLayout(flGroupNotificationsStyle);
		flActions.addChild(flGroupNotifications);
		this.flGroupNotifications = flGroupNotifications;

		const flUserTextsStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			paddingBottom: 5,
			paddingTop: 5,
			height: null,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.COLUMN,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.SPACE_AROUND,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 2
		});
		var flUserTexts = new FlexLayout(flUserTextsStyle);
		flUserInfo.addChild(flUserTexts);
		
		const flOpenNotificationsStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginLeft: 52,
			marginTop: 30,
			height: 22,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.ROW,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var flOpenNotifications = new FlexLayout(flOpenNotificationsStyle);
		flActions.addChild(flOpenNotifications);
		this.flOpenNotifications = flOpenNotifications;

		const flSettingsStyle = getCombinedStyle(".flexLayout", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			marginLeft: 26,
			marginTop: 30,
			height: 22,
			visible: true,
			width: null,
			alignContent: FlexLayout.AlignContent.STRETCH,
			alignItems: FlexLayout.AlignItems.STRETCH,
			flexDirection: FlexLayout.FlexDirection.ROW,
			flexWrap: FlexLayout.FlexWrap.NOWRAP,
			justifyContent: FlexLayout.JustifyContent.FLEX_START,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var flSettings = new FlexLayout(flSettingsStyle);
		flActions.addChild(flSettings);
		this.flSettings = flSettings;

		const imgNotificationsStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: 22,
			image: Image.createFromFile("images://sliderdrawer_notifications_big.png"),
			imageFillType: ImageFillType.NORMAL,
			visible: true,
			width: 22,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var imgNotifications = new ImageView(imgNotificationsStyle);
		flNotifications.addChild(imgNotifications);
		
		const imgOpenNotificationsStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: 22,
			image: Image.createFromFile("images://sliderdrawer_notifications_small.png"),
			imageFillType: ImageFillType.NORMAL,
			visible: true,
			width: 22,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var imgOpenNotifications = new ImageView(imgOpenNotificationsStyle);
		flOpenNotifications.addChild(imgOpenNotifications);
		this.imgOpenNotifications = imgOpenNotifications;

		const imgSettingsStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: 22,
			image: Image.createFromFile("images://sliderdrawer_settings.png"),
			imageFillType: ImageFillType.NORMAL,
			visible: true,
			width: 22,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var imgSettings = new ImageView(imgSettingsStyle);
		flSettings.addChild(imgSettings);
		this.imgSettings = imgSettings;

		const imgDashboardStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: 22,
			image: Image.createFromFile("images://sliderdrawer_dashboard.png"),
			imageFillType: ImageFillType.NORMAL,
			visible: true,
			width: 22,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var imgDashboard = new ImageView(imgDashboardStyle);
		flDashboard.addChild(imgDashboard);
		this.imgDashboard = imgDashboard;

		const imgGroupNotificationsStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: 22,
			image: Image.createFromFile("images://sliderdrawer_notifications_small.png"),
			imageFillType: ImageFillType.NORMAL,
			visible: true,
			width: 22,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var imgGroupNotifications = new ImageView(imgGroupNotificationsStyle);
		flGroupNotifications.addChild(imgGroupNotifications);
		this.imgGroupNotifications = imgGroupNotifications;

		const imgCustomersStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			height: 22,
			image: Image.createFromFile("images://sliderdrawer_customer.png"),
			imageFillType: ImageFillType.NORMAL,
			visible: true,
			width: 22,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var imgCustomers = new ImageView(imgCustomersStyle);
		flCustomers.addChild(imgCustomers);
		this.imgCustomers = imgCustomers;

		const lblUserNameStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDCENTER,
			textColor: Color.create(255, 255, 255, 255),
			height: 27,
			text: "<User Name>",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			font: Font.create("Lato", 22.5, Font.NORMAL)
		});
		var lblUserName = new Label(lblUserNameStyle);
		flUserTexts.addChild(lblUserName);
		this.lblUserName = lblUserName;

		const imgUserPictureStyle = getCombinedStyle(".imageView", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderRadius: 48,
			borderColor: Color.create(255, 255, 255, 255),
			borderWidth: 1,
			height: 96,
			image: Image.createFromFile("images://user_picture_test.png"),
			imageFillType: ImageFillType.ASPECTFIT,
			visible: true,
			width: 96,
			positionType: FlexLayout.PositionType.RELATIVE
		});
		var imgUserPicture = new ImageView(imgUserPictureStyle);
		flUserImage.addChild(imgUserPicture);
		this.imgUserPicture = imgUserPicture;

		const lblSettingsStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDLEFT,
			textColor: Color.create(255, 255, 255, 255),
			marginLeft: 16,
			height: null,
			text: "Settings",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});
		var lblSettings = new Label(lblSettingsStyle);
		flSettings.addChild(lblSettings);
		this.lblSettings = lblSettings;

		const lblCustomersStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDLEFT,
			textColor: Color.create(255, 255, 255, 255),
			marginLeft: 16,
			height: null,
			text: "Customers",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});
		var lblCustomers = new Label(lblCustomersStyle);
		flCustomers.addChild(lblCustomers);
		this.lblCustomers = lblCustomers;

		const lblGroupNotificationsStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDLEFT,
			textColor: Color.create(255, 255, 255, 255),
			marginLeft: 16,
			height: null,
			text: "Group Notifications",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});
		var lblGroupNotifications = new Label(lblGroupNotificationsStyle);
		flGroupNotifications.addChild(lblGroupNotifications);
		this.lblGroupNotifications = lblGroupNotifications;

		const lblTitleStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 255, 255, 255),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDCENTER,
			textColor: Color.create(255, 255, 255, 255),
			height: 17,
			text: "<Title>",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			font: Font.create("Lato", 14, Font.NORMAL)
		});
		var lblTitle = new Label(lblTitleStyle);
		flUserTexts.addChild(lblTitle);
		this.lblTitle = lblTitle;

		const lblNotificationsStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDLEFT,
			textColor: Color.create(255, 255, 255, 255),
			marginLeft: 16,
			height: null,
			text: "Notifications",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});
		var lblNotifications = new Label(lblNotificationsStyle);
		flNotifications.addChild(lblNotifications);
		this.lblNotifications = lblNotifications;

		const lblDashboardStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 208, 2, 27),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDLEFT,
			textColor: Color.create(255, 255, 255, 255),
			marginLeft: 16,
			height: null,
			text: "Dashboard",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});
		var lblDashboard = new Label(lblDashboardStyle);
		flDashboard.addChild(lblDashboard);
		this.lblDashboard = lblDashboard;

		const lblOpenNotificationsStyle = getCombinedStyle(".label", {
			backgroundColor: Color.create(0, 255, 255, 255),
			alpha: 1,
			borderColor: Color.create(255, 0, 0, 0),
			borderWidth: 0,
			textAlignment: TextAlignment.MIDLEFT,
			textColor: Color.create(255, 255, 255, 255),
			marginLeft: 16,
			height: null,
			text: "Open Notifications",
			visible: true,
			width: null,
			positionType: FlexLayout.PositionType.RELATIVE,
			flexGrow: 1,
			font: Font.create("Lato", 16, Font.NORMAL)
		});
		var lblOpenNotifications = new Label(lblOpenNotificationsStyle);
		flOpenNotifications.addChild(lblOpenNotifications);
		this.lblOpenNotifications = lblOpenNotifications;

		//assign the children to sliderDrawer 
		this.children = Object.assign({}, {
			flUserInfo: flUserInfo,
			flActions: flActions,
			btnSigout: btnSigout
		});
		
		//assign the children of flUserInfo
		flUserInfo.children = Object.assign({}, {
			line: line,
			placeholder1: placeholder1,
			flUserImage: flUserImage,
			flUserTexts: flUserTexts
		});
		
		//assign the children of flActions
		flActions.children = Object.assign({}, {
			flDashboard: flDashboard,
			flCustomers: flCustomers,
			flNotifications: flNotifications,
			flGroupNotifications: flGroupNotifications,
			flOpenNotifications: flOpenNotifications,
			flSettings: flSettings
		});
		
		//assign the children of flDashboard
		flDashboard.children = Object.assign({}, {
			imgDashboard: imgDashboard,
			lblDashboard: lblDashboard
		});
		
		//assign the children of flCustomers
		flCustomers.children = Object.assign({}, {
			imgCustomers: imgCustomers,
			lblCustomers: lblCustomers
		});
		
		//assign the children of flUserImage
		flUserImage.children = Object.assign({}, {
			imgUserPicture: imgUserPicture
		});
		
		//assign the children of flNotifications
		flNotifications.children = Object.assign({}, {
			imgNotifications: imgNotifications,
			lblNotifications: lblNotifications
		});
		
		//assign the children of flGroupNotifications
		flGroupNotifications.children = Object.assign({}, {
			imgGroupNotifications: imgGroupNotifications,
			lblGroupNotifications: lblGroupNotifications
		});
		
		//assign the children of flUserTexts
		flUserTexts.children = Object.assign({}, {
			lblUserName: lblUserName,
			lblTitle: lblTitle
		});
		
		//assign the children of flOpenNotifications
		flOpenNotifications.children = Object.assign({}, {
			imgOpenNotifications: imgOpenNotifications,
			lblOpenNotifications: lblOpenNotifications
		});
		
		//assign the children of flSettings
		flSettings.children = Object.assign({}, {
			imgSettings: imgSettings,
			lblSettings: lblSettings
		});
		
	});

SliderDrawer.defaults = getCombinedStyle(".flexLayout", {
	backgroundColor: Color.create(255, 122, 207, 36),
	alpha: 1,
	borderColor: Color.create(255, 255, 255, 255),
	borderWidth: 0,
	height: null,
	visible: true,
	width: null,
	alignContent: FlexLayout.AlignContent.STRETCH,
	alignItems: FlexLayout.AlignItems.STRETCH,
	flexDirection: FlexLayout.FlexDirection.COLUMN,
	flexWrap: FlexLayout.FlexWrap.NOWRAP,
	justifyContent: FlexLayout.JustifyContent.FLEX_START,
	positionType: FlexLayout.PositionType.ABSOLUTE
});

module && (module.exports = SliderDrawer);